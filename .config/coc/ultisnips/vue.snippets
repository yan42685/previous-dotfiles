# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

extends javascript,css

snippet vtemp "vue template" b
<template>
	<${4:div}></$4>
</template>

<script>
export default {
	name: '`!p snip.rv=snip.basename`',
	$0
}
</script>

<style lang="${2:scss}" ${3:scoped}>
</style>
endsnippet

snippet imp "vue import" b
import $1 from '$2'
endsnippet

snippet data "vm data" b
data() {
	return {
		${1:key}:${2:value}
	}
}$0
endsnippet

snippet props "vm props" b
props: {
	${1:propName}: {
		type: $2
	}
}$0
endsnippet

snippet default "prop default" b
default () {
	return $1
}$0
endsnippet

snippet prop "prop" b
${1:propName}: {
	type: ${2:String}
}$0
endsnippet

snippet methods "vm methods" b
methods: {
	${1:methodName} (${2:params}) {
		$3
	}
}$0
endsnippet

snippet mapGet "import mapGetter" b
import { mapGetters } from 'vuex'
endsnippet

snippet mapAct "import mapGetter" b
import { mapActions } from 'vuex'
endsnippet
